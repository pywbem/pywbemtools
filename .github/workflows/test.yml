# This GitHub workflow will setup and run various kinds of tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test

on:
  schedule:
    # The schedule event always (and only) runs on the master branch.
    - # cron (in UTC): minute hour day_of_month month day_of_week
      cron: '30 01 * * SUN'
  push:
    branches: [ master, stable_1.0 ]
  pull_request:
    branches: [ master, stable_1.0 ]

env:
  # WBEM server image on Docker Hub as repository:tag.
  # Keep the version in sync with the Makefile.
  TEST_SERVER_IMAGE: keyporttech/smi-server:0.1.2
  # Base file name of local tarball created from WBEM server image
  TEST_SERVER_IMAGE_TAR: smi-server-0.1.2.tar.gz
  # Local Docker image cache directory
  DOCKER_CACHE_DIR: ~/docker-cache

jobs:

  set_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.select_matrix.outputs.matrix }}
    steps:
    - name: "Select matrix"
      id: select_matrix
      # Select full matrix when scheduled or when releasing, and normal matrix
      # otherwise. The matrix is defined as a JSON string.
      # TODO: Find a way to define this with less escapes.
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.head_ref }}" =~ ^release_ ]]; then \
          echo "::set-output name=matrix::{ \
            \"os\": [ \"ubuntu-latest\", \"macos-latest\", \"windows-latest\" ], \
            \"python-version\": [ \"2.7\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\" ], \
            \"package_level\": [ \"minimum\", \"latest\" ], \
          }"; \
        else \
          echo "::set-output name=matrix::{ \
            \"os\": [ \"ubuntu-latest\" ], \
            \"python-version\": [ \"2.7\", \"3.5\", \"3.10\" ], \
            \"package_level\": [ \"minimum\", \"latest\" ], \
            \"include\": [ \
              { \
                \"os\": \"macos-latest\", \
                \"python-version\": \"2.7\", \
                \"package_level\": \"latest\" \
              }, \
              { \
                \"os\": \"macos-latest\", \
                \"python-version\": \"3.5\", \
                \"package_level\": \"minimum\" \
              }, \
              { \
                \"os\": \"macos-latest\", \
                \"python-version\": \"3.5\", \
                \"package_level\": \"latest\" \
              }, \
              { \
                \"os\": \"macos-latest\", \
                \"python-version\": \"3.10\", \
                \"package_level\": \"latest\" \
              }, \
              { \
                \"os\": \"windows-latest\", \
                \"python-version\": \"2.7\", \
                \"package_level\": \"latest\" \
              }, \
              { \
                \"os\": \"windows-latest\", \
                \"python-version\": \"3.5\", \
                \"package_level\": \"latest\" \
              }, \
              { \
                \"os\": \"windows-latest\", \
                \"python-version\": \"3.10\", \
                \"package_level\": \"latest\" \
              } \
            ] \
          }"; \
        fi
    - name: Show matrix in JSON
      run: echo '${{ steps.select_matrix.outputs.matrix }}'

  test:
    needs: set_matrix
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Create local cache directory for Docker images
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        mkdir -p ${{ env.DOCKER_CACHE_DIR }}
    - name: Set up caching for local Docker image cache directory
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/cache@v1
      with:
        path: ${{ env.DOCKER_CACHE_DIR }}
        key: docker-cache-{hash}
        restore-keys: |
          docker-cache-
    - name: Get WBEM server image from Docker Hub or local Docker image cache
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        if [[ ! -f ${{ env.DOCKER_CACHE_DIR }}/${{ env.TEST_SERVER_IMAGE_TAR }} ]]; then \
          echo "Pulling image from Docker Hub"; \
          docker pull ${{ env.TEST_SERVER_IMAGE }}; \
          echo "Saving image in local Docker image cache"; \
          docker save -o ${{ env.DOCKER_CACHE_DIR }}/${{ env.TEST_SERVER_IMAGE_TAR }} ${{ env.TEST_SERVER_IMAGE }}; \
        else \
          echo "Loading image from local Docker image cache"; \
          docker load -i ${{ env.DOCKER_CACHE_DIR }}/${{ env.TEST_SERVER_IMAGE_TAR }}; \
        fi
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display initial Python packages
      run: |
        echo "Installed Python packages:"
        pip list
    - name: Install the package and its dependents
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make install
    - name: Display Python packages
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        echo "Installed Python packages:"
        pip list
    - name: Development setup
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make develop
    - name: Display Python packages
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        echo "Installed Python packages:"
        pip list
    - name: Display platform and env vars
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make platform env
    - name: Run build
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make build
    - name: Run builddoc
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make builddoc
    - name: Run check
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make check
    - name: Run pylint
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make pylint
    - name: Run test
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
        # TESTCASES: test_class_cmds.py
      run: |
        make test
    - name: Run end2end test with WBEM server Docker image
      if: ${{ matrix.os == 'ubuntu-latest' }}
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
        # Uses TEST_SERVER_IMAGE variable
      run: |
        make end2endtest
    - name: Send coverage result to coveralls.io
      shell: bash -l {0}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_PARALLEL: true
        COVERALLS_FLAG_NAME: "${{ matrix.os }},${{ matrix.python-version }},${{ matrix.package_level }}"
      run: |
        coveralls
    - name: Run installtest
      env:
        PACKAGE_LEVEL: ${{ matrix.package_level }}
      run: |
        make installtest

  test_finish:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Install coveralls
      run: |
        pip3 install --upgrade coveralls
    - name: Send coverage finish to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        coveralls --finish
